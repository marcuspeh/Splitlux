@startuml
title Class Diagram Splitlux

class User {
    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['name']
    name = models.CharField(max_length=CHAR_LENGTH, unique=True)
    email = models.EmailField(max_length=CHAR_LENGTH, unique=True)

    is_admin = models.BooleanField(default=False)
    is_staff = models.BooleanField(default=False)

    created_at = models.DateTimeField(default=timezone.now)
}

class Group {
    name = models.CharField(max_length=CHAR_LENGTH)
    members = models.ManyToManyField(User, related_name="group_members")

    transactions = models.ManyToManyField(Transaction)
    to_pay_list = models.ManyToManyField(Payment)

    is_closed = models.BooleanField(default=False)

    code_id = models.CharField(max_length=CHAR_LENGTH)
    owner = models.ForeignKey(User, on_delete=models.PROTECT, related_name="group_owner")
  
    created_at = models.DateTimeField(auto_now_add=True)
}

class Payment {
    payer = models.ForeignKey(User, on_delete=models.CASCADE, related_name='payment_payer')
    payee = models.ForeignKey(User, on_delete=models.CASCADE, related_name='payment_payee')

    amount = models.FloatField()
}

class Transaction {
    title = models.CharField(max_length=CHAR_LENGTH)
    amount = models.FloatField()

    payers = models.ManyToManyField(Pair, related_name='transaction_payers')
    expenses = models.ManyToManyField(Pair, related_name='transaction_expenses')

    created_at = models.DateTimeField(auto_now_add=True)
}

class Pair {
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='pair_user')
    amount = models.FloatField()
}




Group "*" -up-> User
Group "1"-->"*" Transaction
Group "1"-->"*" Payment
Transaction "1"*-->"1..* payer" Pair
Transaction "1"*-->"1..* expenses" Pair

@enduml